// Sets the name of files to ModName-Forge-MCVersion.
if (project.hasProperty("archive_name")) {
    archivesBaseName = project.archive_name
} else {
    archivesBaseName = "${mod_id}-${minecraft_version}"
}

java {

    // Generate a sources JAR.
    withSourcesJar()
    
    // Generate a JavaDoc JAR.
    withJavadocJar()

    // Set minimum language version.  
    if (project.hasProperty("java_16")) {
        toolchain.languageVersion = JavaLanguageVersion.of(16)
    } else {
        if (project.hasProperty("java_17")) {
            toolchain.languageVersion = JavaLanguageVersion.of(17)
        } else {
            toolchain.languageVersion = JavaLanguageVersion.of(8)
        }
    }
}

javadoc {

    // Supress annoying warnings when generating JavaDoc files.
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    if (project.hasProperty("library")) {
        if (project.hasProperty("java_17")) {
            manifest {
                attributes([
                        'FMLModType'              : 'GAMELIBRARY',
                        'Timestamp'               : System.currentTimeMillis(),
                        'Specification-Title'     : project.ext.modName,
                        'Specification-Vendor'    : project.ext.modAuthor,
                        'Specification-Version'   : project.version,
                        'Implementation-Title'    : project.ext.modName,
                        'Implementation-Version'  : project.version,
                        'Implementation-Vendor'   : project.ext.modAuthor,
                        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                        'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
                ])
            }
        } else {
            manifest {
                attributes([
                        'FMLModType'              : 'LIBRARY',
                        'Timestamp'               : System.currentTimeMillis(),
                        'Specification-Title'     : project.ext.modName,
                        'Specification-Vendor'    : project.ext.modAuthor,
                        'Specification-Version'   : project.version,
                        'Implementation-Title'    : project.ext.modName,
                        'Implementation-Version'  : project.version,
                        'Implementation-Vendor'   : project.ext.modAuthor,
                        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                        'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
                ])
            }
        }

    } else {
        manifest {
            attributes([
                'Timestamp': System.currentTimeMillis(),
                'Specification-Title': project.ext.modName,
                'Specification-Vendor': project.ext.modAuthor,
                'Specification-Version': project.version,
                'Implementation-Title': project.ext.modName,
                'Implementation-Version': project.version,
                'Implementation-Vendor' : project.ext.modAuthor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
            ])
        }
    }
}
